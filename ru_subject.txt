IRC__**

(Interner Relay Chat)


__COMMON_INSTRUCTIONS__

* Ваша программа не должна крашится от каких-либо обстоятельств (даже когда она уходит
за пределы памяти), и не должна внезапмно заканчивать работу. Если это случится, ваш
проект оценивается 0.

* Если сабжект предлагает что-либо, вы должны это сделать. Makefile должен
присутствовать, работать и нерелинкаться.

* Ваш Makefile должен содержать следующие првила: $(NAME), all, clean, fclean, re.

* Будет крайне полезно создать тест-пргграммы для своего проекта, даже если эта работа
не требует оценки и проверки. Это даст тебе шанс с легкостью проверить проверить свою
работу и работу своих пиров. Вы найдете эти тесты особенно полезными во время 
своей защиты. Кстати, во время защиты, вы свободны в использовании собственных тестов
и тестов своих пиров.

* Отпраьте свою работу в положенный гит-репозиторий. Только работа на репозитории будет
оценена. Так же будет оцениваться ваще понимание теоретичечкой части проекта. Если
будут заданы вопросы, на которые вы не сможете ответить, то ваша работа будет
оценена в 0.


__INTRODUCTION__

Internet Relay Chat или IRC - это текстовый протокол связи в Интернете. Это мгновенное
общение важно в формате разговора в группах, каналах, но так же важно для общения
один-на-один.

Клиентская программа IRC соединяется с IRC сервером для доступа к определенному каналу.
IRC сервера соединяются между ними для создания глобальной сети с уникальными каналами.


__MANDAORY_PART__

* Вы должны написать IRC сервер на С++ 98.

* Если вам понадобиться много функций из Си, то вы можете их использовать, но
предпочтение лучше отдать функция на С++.

* С++ стандарт должен быть 98 года. Ваш проект должен компилировать именно этим
компилятором.

* Никаких внешних библиотек, Boost'ов и так далее.

* Старайтесь использовать больше С++ кода, если это возможно (например использование
<cstring> более приветственно чем <string.h>).

* В сабже и в шкале упоминается poll, но вы можете использовать эквивалент:
select, kqueue, epoll.

* Общение между клиентом и сервером должно быть на TCP/IP(v4) или (v6).

* Вам не нужно писать клиента.

* Вам не нужно обрабатывать обмен данными между серверами.

* Ваш запуск должен выглядеть следующим образом:
"./ircserv [host:port_network:password_network] <port> <password>"

* Host - имя хоста, по которому IRC должен подключиться, чтобы присоединиться к уже
существующей сети.

* Port_network - это серверный порт, по которому IRC должен подсоединиться к хосту.

* Password_network - пароль для связи с хостои.

* port - это номер порта, на котором ваш сервер будет принимать входящие соединения.

* password -пароль, необходимый любому IRC-клиенту, который хочет подключиться к
вашему серверу.

* Если host, port_network и password_network не поданы на вход, вы должны создать
новую IRC сеть.


* Сервер должен иметь возможность обрабатывать несколько клиентов одновременно и никогда
не падать. Разветвление запрещено, все операции ввода-вывода должны быть неблокирующими и использовать только 1 poll (или эквивалент) для всех (чтение, запись, но также и
прослушивание, ...) **__FT_IRC__**

***
Мы разрешили вам использовать fcntl,
потому что в MacOS X запись реализована не так, как в других ОС Unix.
Вы должны использовать неблокирующий FD, чтобы получить результат, аналогичный другим ОС.
***
Поскольку вы используете неблокирующий FD, вы можете использовать функции read/recv
или функции write/send без poll (или эквивалента), и ваш сервер не будет блокироваться.
Но это будет потреблять больше системных ресурсов.
Таким образом, повторная попытка чтения/recv или записи/отправки в любом FD без прохождения
через poll (или эквивалент) даст вам оценку, равную 0 и конец оценки.
***
Вы можете использовать fcntl только следующим образом: fcntl(fd, F_SETFL, O_NONBLOCK);
Любые другие флаги запрещены.
***

* Разумеется, от вас ожидается, что вы построите чистый код.
Проверяйте абсолютно каждую ошибку и в случаях,
когда у вас может возникнуть проблема (неполный прием данных, низкая пропускная способность...)

* Чтобы убедиться, что ваш сервер правильно использует все,
что вы отправляете, начальный тест можно провести с помощью nc (
Используйте ctrl+d для отправки частей команды):
  \$> nc 127.0.0.1 6667
  com^Dman^Dd
  \$>
Это позволит вам сначала отправить буквы com, man, d\n.
Вы должны сначала агрегировать пакеты, чтобы перестроить команду для обработки.

* Существует несколько клиентов IRC, вы должны выбрать один из них в качестве эталонного,
и он будет использоваться во время защиты.

* Чтобы быть совместимым с этим клиентом, вам необходимо реализовать
хотя бы часть официального RFC IRC

* Использование клиента на вашем сервере должно быть таким же, как и на любом официальном IRC-сервере,
но для уверенности мы перечислим минимально необходимые функции.

* Вы должны иметь возможность подключить эталонный клиент к вашему серверу без возникновения ошибок.

* Вы должны иметь возможность аутентифицироваться, устанавливать ник, имя пользователя,
присоединяться к каналу, отправлять и получать личные сообщения с помощью этого клиента.

* Все сообщения от одного клиента на канале отправляются всем остальным клиентам канала.

* У вас должны быть операторы и обычные пользователи.

* Некоторые специфические действия/команды оператора.
